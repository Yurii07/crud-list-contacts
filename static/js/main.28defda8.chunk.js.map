{"version":3,"sources":["firebase.js","components/ContactForm.js","components/Contacts.js","App.js","reportWebVitals.js","index.js"],"names":["fireDb","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","ref","ContactForm","props","initialFieldValues","fullName","mobile","email","address","useState","values","setValues","useEffect","currentId","contactObjects","handleInputChange","e","target","name","value","autoComplete","onSubmit","preventDefault","addOrEdit","className","type","placeholder","onChange","required","Contacts","setContactObjects","setCurrentId","firebaseDb","child","on","snapshot","val","obj","push","err","console","log","set","Object","keys","map","id","onClick","key","window","confirm","remove","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAeeA,E,MAFFC,EAASC,cAVD,CACjBC,OAAQ,0CACRC,WAAY,sCACZC,YAAa,6EACbC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,eACnBC,MAAO,8CAKWC,WAAWC,M,OC8ElBC,EA1FK,SAACC,GAEjB,IAAMC,EAAqB,CACvBC,SAAU,GACVC,OAAQ,GACRC,MAAO,GACPC,QAAS,IANc,EASDC,mBAASL,GATR,mBAStBM,EATsB,KASdC,EATc,KAW3BC,qBAAU,WACkB,KAApBT,EAAMU,UACNF,EAAU,eACHP,IAGPO,EAAU,eACHR,EAAMW,eAAeX,EAAMU,eAGvC,CAACV,EAAMU,UAAWV,EAAMW,iBAE3B,IAAMC,EAAoB,SAACC,GAAO,IAAD,EACTA,EAAEC,OAAjBC,EADwB,EACxBA,KAAMC,EADkB,EAClBA,MACXR,EAAU,2BACHD,GADE,kBAEJQ,EAAOC,MAShB,OACI,uBAAMC,aAAa,MAAMC,SANJ,SAACL,GACtBA,EAAEM,iBACFnB,EAAMoB,UAAUb,IAIhB,UAEI,qBAAKc,UAAU,+CAAf,SACI,sBAAKA,UAAU,mBAAf,UACI,sBAAMA,UAAU,mBAAhB,SAAmC,mBAAGA,UAAU,kBAChD,uBAAOC,KAAK,OAAOD,UAAU,eAAeE,YAAa,YAAaR,KAAM,WACrEC,MAAOT,EAAOL,SACdsB,SAAUZ,EACVa,UAAQ,SAKvB,sBAAKJ,UAAU,kBAAf,UAEI,qBAAKA,UAAU,sBAAf,SACI,sBAAKA,UAAU,mBAAf,UACI,sBAAMA,UAAU,mBAAhB,SAAmC,mBAAGA,UAAU,wBAChD,uBAAOC,KAAK,OAAOD,UAAU,eAAeE,YAAY,SAASR,KAAK,SAC/DC,MAAOT,EAAOJ,OACdqB,SAAUZ,EACVa,UAAQ,SAKvB,qBAAKJ,UAAU,sBAAf,SACI,sBAAKA,UAAU,mBAAf,UACI,sBAAMA,UAAU,mBAAhB,SACI,mBAAGA,UAAU,sBAEjB,uBAAOC,KAAK,OAAOD,UAAU,eAAeE,YAAY,QAAQR,KAAK,QAC9DC,MAAOT,EAAOH,MACdoB,SAAUZ,EACVa,UAAQ,YAK3B,qBAAKJ,UAAU,aAAf,SACQ,0BAAUA,UAAU,eAAeE,YAAY,UAAUR,KAAK,UAAUC,MAAOT,EAAOF,QAC5EmB,SAAUZ,MAK5B,uBAAOU,KAAK,SAASN,MAA2B,KAApBhB,EAAMU,UAAmB,OAAS,SACvDW,UAAU,kCCyBdK,EA5GE,WAAO,IAAD,EAEuBpB,mBAAS,IAFhC,mBAEdK,EAFc,KAEEgB,EAFF,OAGarB,mBAAS,IAHtB,mBAGdI,EAHc,KAGHkB,EAHG,KAKnBnB,qBAAU,WACNoB,EAAWC,MAAM,YAAYC,GAAG,SAAS,SAAAC,GACf,MAAlBA,EAASC,MACTN,EAAkB,eACXK,EAASC,QAGhBN,EAAkB,SAE3B,IAqCH,OACI,qCACI,qBAAKN,UAAU,wDAAf,SACI,qBAAKA,UAAU,uBAAf,SACI,oBAAIA,UAAU,gCAAd,kCAIR,sBAAKA,UAAU,MAAf,UACI,qBAAKA,UAAU,WAAf,SACI,cAAC,EAAD,CAAmBD,UA7CjB,SAAAc,GACG,IAAbxB,EACAmB,EAAWC,MAAM,YAAYK,KACzBD,GACA,SAAAE,GACQA,EACAC,QAAQC,IAAIF,GAEZR,EAAa,OAGxBC,EAAWC,MAAX,mBAA6BpB,IAAa6B,IAC3CL,GACA,SAAAE,GACQA,EACAC,QAAQC,IAAIF,GAEZR,EAAa,QA4BiBlB,YAAWC,qBAE7C,sBAAKU,UAAU,WAAf,UACI,mDACA,wBAAOA,UAAW,uCAAlB,UACI,uBAAOA,UAAW,cAAlB,SACA,+BACI,2CACA,wCACA,uCACA,8CAGJ,gCAEImB,OAAOC,KAAK9B,GAAgB+B,KAAI,SAAAC,GAC5B,OAAO,+BACH,6BAAKhC,EAAegC,GAAIzC,WACxB,6BAAKS,EAAegC,GAAIxC,SACxB,6BAAKQ,EAAegC,GAAIvC,QACxB,+BACI,mBAAGiB,UAAW,mBACXuB,QAAS,WACLhB,EAAae,IAFpB,SAII,mBAAGtB,UAAW,wBAElB,mBAAGA,UAAW,kBACXuB,QAAS,WAnD/B,IAAAC,IAoDmCF,EAnD5CG,OAAOC,QAAQ,yCACflB,EAAWC,MAAX,mBAA6Be,IAAOG,QAChC,SAAAZ,GACQA,EACAC,QAAQC,IAAIF,GAEZR,EAAa,QA2CG,SAKI,mBAAGP,UAAW,4BAhBVsB,qBCnEjCM,EAXH,WACR,OAEI,qBAAK5B,UAAU,MAAf,SACI,qBAAKA,UAAU,uBAAf,SACI,cAAC,EAAD,SCID6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UAEQ,cAAC,EAAD,MAGRC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.28defda8.chunk.js","sourcesContent":["// Your web app's Firebase configuration\nimport firebase from \"firebase\";\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyBCKx-D1ZZNeAsRgkGyer5WX8gGIRcFWsw\",\n    authDomain: \"list-contacts-267fd.firebaseapp.com\",\n    databaseURL: \"https://list-contacts-267fd-default-rtdb.europe-west1.firebasedatabase.app\",\n    projectId: \"list-contacts-267fd\",\n    storageBucket: \"list-contacts-267fd.appspot.com\",\n    messagingSenderId: \"544886713649\",\n    appId: \"1:544886713649:web:fb37c2a3073456a802d410\"\n};\n// Initialize Firebase\nvar fireDb = firebase.initializeApp(firebaseConfig);\n\nexport default fireDb.database().ref();","import React, {useState, useEffect} from 'react';\nimport firebaseDb from \"../firebase\";\n\nconst ContactForm = (props) => {\n\n    const initialFieldValues = {\n        fullName: '',\n        mobile: '',\n        email: '',\n        address: ''\n    }\n\n    var [values, setValues] = useState(initialFieldValues);\n\n    useEffect(() => {\n        if (props.currentId === '')\n            setValues({\n                ...initialFieldValues\n            })\n        else {\n            setValues({\n                ...props.contactObjects[props.currentId]\n            })\n        }\n    }, [props.currentId, props.contactObjects])\n\n    const handleInputChange = (e) => {\n        let {name, value} = e.target;\n        setValues({\n            ...values,\n            [name]: value\n        })\n    }\n\n    const handleFormSubmit = (e) => {\n        e.preventDefault();\n        props.addOrEdit(values)\n    }\n\n    return (\n        <form autoComplete='off' onSubmit={handleFormSubmit} >\n\n            <div className=\"form-group input-group flex-nowrap col-md-12\">\n                <div className=\"input-group mb-3\">\n                    <span className=\"input-group-text\"><i className=\"fas fa-user\"></i></span>\n                    <input type=\"text\" className=\"form-control\" placeholder={'Full Name'} name={'fullName'}\n                           value={values.fullName}\n                           onChange={handleInputChange}\n                           required\n                    />\n                </div>\n            </div>\n\n            <div className=\"form-row d-flex\">\n\n                <div className=\"form-group col-md-6\">\n                    <div className=\"input-group mb-3\">\n                        <span className=\"input-group-text\"><i className=\"fas fa-mobile-alt\"></i></span>\n                        <input type=\"text\" className=\"form-control\" placeholder='Mobile' name='mobile'\n                               value={values.mobile}\n                               onChange={handleInputChange}\n                               required\n                        />\n                    </div>\n                </div>\n\n                <div className=\"form-group col-md-6\">\n                    <div className=\"input-group mb-3\">\n                        <span className=\"input-group-text\">\n                            <i className=\"fas fa-envelope\"></i>\n                        </span>\n                        <input type=\"text\" className=\"form-control\" placeholder='Email' name='email'\n                               value={values.email}\n                               onChange={handleInputChange}\n                               required\n                        />\n                    </div>\n                </div>\n            </div>\n            <div className=\"form-group\">\n                    <textarea className=\"form-control\" placeholder='Address' name='address' value={values.address}\n                              onChange={handleInputChange}\n                    />\n            </div>\n\n            {/*<div className=\"form-control\">*/}\n            <input type=\"submit\" value={props.currentId === '' ? 'Save' : 'Update'}\n                   className='btn btn-primary btn-block'/>\n            {/*</div>*/}\n        </form>\n    );\n};\n\nexport default ContactForm;","import React, {useState, useEffect} from 'react';\nimport ContactForm from \"./ContactForm\";\nimport firebaseDb from \"../firebase\"\n\nconst Contacts = () => {\n\n    let [contactObjects, setContactObjects] = useState({})\n    let [currentId, setCurrentId] = useState('')\n\n    useEffect(() => {\n        firebaseDb.child('contacts').on('value', snapshot => {\n            if (snapshot.val() != null)\n                setContactObjects({\n                    ...snapshot.val()\n                })\n            else\n                setContactObjects({})\n        })\n    }, [])\n\n    const addOrEdit = obj => {\n        if (currentId == '')\n            firebaseDb.child('contacts').push(\n                obj,\n                err => {\n                    if (err)\n                        console.log(err)\n                    else\n                        setCurrentId('')\n                }\n            )\n        else firebaseDb.child(`contacts/${currentId}`).set(\n            obj,\n            err => {\n                if (err)\n                    console.log(err)\n                else\n                    setCurrentId('')\n            }\n        )\n    }\n\n    const onDelete = key => {\n        if (window.confirm('Are you sure to delete this record ?')) {\n            firebaseDb.child(`contacts/${key}`).remove(\n                err => {\n                    if (err)\n                        console.log(err)\n                    else\n                        setCurrentId('')\n                }\n            )\n        }\n    }\n\n    return (\n        <>\n            <div className=\"p-5 mb-4 bg-light rounded-3 jumbotron jumbotron-fluid\">\n                <div className=\"container-fluid py-5\">\n                    <h1 className=\"display-4 fw-bold text-center\">Contact Register</h1>\n                </div>\n            </div>\n\n            <div className=\"row\">\n                <div className=\"col-md-5\">\n                    <ContactForm {...({addOrEdit, currentId, contactObjects})}/>\n                </div>\n                <div className=\"col-md-7\">\n                    <div>list of contacts</div>\n                    <table className={'table table-borderless table-striped'}>\n                        <thead className={'thead-light'}>\n                        <tr>\n                            <th>Full Name</th>\n                            <th>mobile</th>\n                            <th>email</th>\n                            <th>actions</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {\n                            Object.keys(contactObjects).map(id => {\n                                return <tr key={id}>\n                                    <td>{contactObjects[id].fullName}</td>\n                                    <td>{contactObjects[id].mobile}</td>\n                                    <td>{contactObjects[id].email}</td>\n                                    <td>\n                                        <a className={'btn text-primary'}\n                                           onClick={() => {\n                                               setCurrentId(id)\n                                           }}>\n                                            <i className={'fas fa-pencil-alt'}></i>\n                                        </a>\n                                        <a className={'btn text-danger'}\n                                           onClick={() => {\n                                               onDelete(id)\n                                           }}\n                                        >\n                                            <i className={'fas fa-trash-alt'}></i>\n                                        </a>\n                                    </td>\n                                </tr>\n                            })\n                        }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </>\n\n    );\n};\n\nexport default Contacts;","import React from 'react';\nimport Contacts from \"./components/Contacts\";\n\nconst App = () => {\n    return (\n\n        <div className=\"row\">\n            <div className=\"col-md-8 offset-md-2\">\n                <Contacts/>\n            </div>\n        </div>\n    );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// import {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n      {/*<BrowserRouter>*/}\n          <App />\n      {/*</BrowserRouter>*/}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}